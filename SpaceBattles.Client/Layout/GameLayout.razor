@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject SaveService SaveService

<MudThemeProvider Theme="@MainLayout.SpaceBattlesTheme"/>
<MudSnackbarProvider/>

<MudLayout>
    
    <MudAppBar Color="Color.Dark" Fixed>
        <MudText Typo="Typo.h4" Color="Color.Info" Style="font-family:TitleFont;font-style:italic;">SpaceBattles</MudText>

        <MudButton Size="Size.Small" Href="/Overview" Variant="_page == CurrentPage.Overview ? Variant.Filled : Variant.Outlined" Color="Color.Info" Class="ml-8 mr-2" DisableRipple>Overview</MudButton>
        <MudButton Size="Size.Small" Href="/Buildings" Variant="_page == CurrentPage.Buildings ? Variant.Filled : Variant.Outlined" Color="Color.Info" Class="mx-2" DisableRipple>Buildings</MudButton>
        <MudButton Size="Size.Small" Href="/Shipyard" Variant="_page == CurrentPage.Shipyard ? Variant.Filled : Variant.Outlined" Color="Color.Info" Class="mx-2" DisableRipple>Shipyard</MudButton>

        <MudSpacer />
        
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Save" IconColor="Color.Success" Color="Color.Success" Size="Size.Small" OnClick="SaveGame" Class="mx-2">Save</MudButton>
        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Error" OnClick="Logout">Log out</MudButton>
    </MudAppBar>
    
    <MudMainContent Style="display:flex; flex-direction:column; justify-content:center; height: 100vh;">
        @Body
    </MudMainContent>
</MudLayout>

<style>    
    body {
        background: url("images/background.avif") no-repeat;
        background-size: cover;
        height: 100vh;
    }
</style>

@code {
    private CurrentPage _page;
    private EventHandler<LocationChangedEventArgs>? _locationEvent;

    private enum CurrentPage
    {
        Overview, 
        Buildings,
        Shipyard,
    }

    protected override void OnInitialized()
    {
        _page = CurrentPage.Overview;

        _locationEvent = (_, e) =>
        {
            switch (e.Location.Split('/').Last())
            {
                case "Overview":
                    _page = CurrentPage.Overview;
                    break;

                case "Buildings":
                    _page = CurrentPage.Buildings;
                    break;
                    
                case "Shipyard":
                    _page = CurrentPage.Shipyard;
                    break;
            }

            StateHasChanged();
        };

        NavigationManager.LocationChanged += _locationEvent;
    }

    private async Task SaveGame()
    {
        await SaveService.SaveToStorage();
    }

    private void Logout()
    {
        NavigationManager.LocationChanged -= _locationEvent;
        NavigationManager.NavigateTo("/");
    }
}