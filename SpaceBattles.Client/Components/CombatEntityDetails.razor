@using SpaceBattles.Core.Domain.Entities.Battle

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="pa-4 rounded-xl">
        <MudStack>
            <MudStack Row>
                <MudImage Src="@CombatEntity.CombatEntity.ImagePath" Alt="a visual representation of this building" Class="align-self-center rounded-lg" Width="256" Height="256" />
                <MudStack>
                    <MudStack Row Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h5" Style="font-family:TitleFont;">@CombatEntity.CombatEntity.Name</MudText>
                        <MudText Color="Color.Info" Typo="Typo.h6">@CombatEntity.Quantity available</MudText>
                    </MudStack>

                    <MudDivider />

                    <MudText Typo="Typo.body1">@CombatEntity.CombatEntity.Description</MudText>

                </MudStack>
            </MudStack>

            <MudStack Row>
                <MudDivider Class="flex-grow-1 align-self-center"/>
                <MudText Typo="Typo.body1" Color="Color.Info" Style="font-family:TitleFont;">Combat characteristics</MudText>
                <MudDivider Class="flex-grow-1 align-self-center" />
            </MudStack>

            <CombatEntityDisplay Entity="@CombatEntity.CombatEntity" />

            @* @if (CombatEntityConstructionProcess is not null && !upgradeStarted) *@
            @* { *@
            @*     <MudAlert Class="align-self-center pointer-events-none" Severity="Severity.Warning">Another construction is already in progress..</MudAlert> *@
            @* } *@
            @* else if (GameData.CurrentPlanet!.Buildings.Single(x => x.BuildingId == 8).Level < CombatEntity.CombatEntity.RequiredShipyardLevel) *@
            @* { *@
            @*     <MudAlert Class="align-self-center pointer-events-none" Severity="Severity.Error">Shipyard level @CombatEntity.CombatEntity.RequiredShipyardLevel required</MudAlert> *@
            @* } *@
            @* else if (!upgradeStarted && CombatEntityConstructionProcess is null) *@
            @* { *@
            @* *@
            @*     <MudStack Row Style="color:var(--mud-palette-info)"> *@
            @*         <MudDivider Class="flex-grow-1 align-self-center" /> *@
            @*         <MudText Typo="Typo.body1" Style="font-family:TitleFont;">Construction costs</MudText> *@
            @*         <MudDivider Class="flex-grow-1 align-self-center" /> *@
            @*     </MudStack> *@
            @* *@
            @*     <TotalCostDisplay Upgrade="upgradeCost" Inventory="GameData.CurrentPlanet!.Items" /> *@
            @* *@
            @*     @if (GameData.CurrentPlanet!.HasEnoughRessources(ref upgradeCost) && CombatEntityConstructionProcess is null) *@
            @*     { *@
            @*         <MudButton Class="align-self-center" Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="() => Upgrade(upgradeCost)">Build</MudButton> *@
            @*     } *@
            @*     else *@
            @*     { *@
            @*         <MudAlert Class="align-self-center pointer-events-none" Severity="Severity.Error">Not enough ressources</MudAlert> *@
            @*     } *@
            @* } *@
            @* else if (upgradeStarted) *@
            @* { *@
            @*     <MudAlert Class="align-self-center pointer-events-none" Severity="Severity.Success">The research started succesfully</MudAlert> *@
            @* } *@
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public CombatEntityInventory CombatEntity { get; set; } = default!;

    // [Parameter]
    // public CombatEntityConstructionProcess? CombatEntityConstructionProcess { get; set; }

    // [Inject]
    // private GameData GameData { get; init; } = default!;
    //
    // [Inject]
    // private SpaceBattlesDatabase Database { get; init; } = default!;

    // private UpgradeCosts upgradeCost;
    //
    // private bool upgradeStarted = false;

    // protected override void OnInitialized()
    // {
    //     int shipyardLevel = GameData.CurrentPlanet!.Buildings.Single(x => x.BuildingId == 8).Level;
    //     int naniteLevel = GameData.CurrentPlanet!.Buildings.Single(x => x.BuildingId == 10).Level;
    //     int timeReductionFactor = (1 + shipyardLevel) * 2500 * (1 << naniteLevel);
    //
    //     upgradeCost = CombatEntity.CombatEntity.GetRecipeRequirements(GameData.CurrentUniverseSpeed, timeReductionFactor);
    // }
    //
    // private async Task Upgrade(UpgradeCosts upgradeCost)
    // {
    //     GameData.CurrentPlanet!.ConsumeRessource(upgradeCost);
    //
    //     CombatEntityConstructionProcess upgrade = new CombatEntityConstructionProcess(upgradeCost.Duration)
    //     {
    //         PlanetId = GameData.CurrentPlanet!.PlanetId,
    //         CombatEntityId = CombatEntity.CombatEntityId,
    //     };
    //
    //     Database.ConstructionProcesses.Add(upgrade);
    //     CombatEntityConstructionProcess = upgrade;
    //     GameData.CurrentPlanet!.CombatEntityConstructionProcess = upgrade;
    //
    //     await Database.SaveChangesAsync();
    //     upgradeStarted = true;
    // }
}
