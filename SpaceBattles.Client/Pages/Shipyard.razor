@page "/Shipyard"

@inject GameState GameState

@using SpaceBattles.Core.Application.Services
@using SpaceBattles.Core.Domain.Entities.Battle

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="overflow-y:scroll; max-height:calc(100vh - var(--mud-appbar-height);">

    @* @if (GameData.CurrentPlanet!.CombatEntityConstructionProcess is not null) *@
    @* { *@
    @*     <Progress @ref="ProgressComponent" *@
    @*             Display="@GameData.CurrentPlanet.CombatEntityInventories.Single(x => x.CombatEntityId == GameData.CurrentPlanet!.CombatEntityConstructionProcess.CombatEntityId).CombatEntity.Name" *@
    @*             Image="@GameData.CurrentPlanet.CombatEntityInventories.Single(x => x.CombatEntityId == GameData.CurrentPlanet!.CombatEntityConstructionProcess.CombatEntityId).CombatEntity.ImagePath" *@
    @*             Process="GameData.CurrentPlanet!.CombatEntityConstructionProcess" /> *@
    @* } *@

    <MudGrid Class="py-3" Spacing="0" Justify="Justify.Center">
        @foreach (CombatEntityInventory spaceship in spaceships)
        {
            <MudItem xs="12" md="5">
                <MudPaper Class="pa-2 ma-1">
                    <MudStack Row>
                        <MudImage Src="@spaceship.CombatEntity.ImagePath" Alt="a visual representation of this building" Class="align-self-center rounded-lg" Width="150" Height="150" Style="@(GetImageStyle(spaceship))" />

                        <MudStack Class="flex-grow-1">
                            <MudText Typo="Typo.h5" Style="font-family:TitleFont">@spaceship.CombatEntity.Name</MudText>
                            <MudDivider />
                            <MudText Color="Color.Info" Typo="Typo.h6">@spaceship.Quantity available</MudText>

                            <MudSpacer />
                            <MudButton Class="align-self-center" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" OnClick="() => OpenDetails(spaceship.CombatEntityId)">Details</MudButton>

                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>

    <MudOverlay @bind-Visible="overlayVisible" DarkBackground AutoClose>
        <CombatEntityDetails CombatEntity="spaceships[selectedIndex]" CombatEntityConstructionProcess="GameData.CurrentPlanet!.CombatEntityConstructionProcess"/>
    </MudOverlay>  

</MudContainer>

@code {
    // [Inject]
    // private GameData GameData { get; init; } = default!;
    //
    // [Inject]
    // private SpaceBattlesDatabase Database { get; init; } = default!;

    private CombatEntityInventory[] spaceships = Array.Empty<CombatEntityInventory>();

    private Progress? ProgressComponent;

    private int selectedIndex = 0;
    private bool overlayVisible = false;

    protected override void OnInitialized()
    {
        spaceships = GameState.CurrentPlanet.Spaceships.ToArray();
        // if (!GameData.IsCorrectlyInitialized)
        //     return;
        //
        // GameData.CurrentPlanet!.UpdateOnlyLoadedRelations(Database, false);
        // spaceships = GameData.CurrentPlanet!.CombatEntityInventories.Where(x => x.CombatEntityId > 10).ToArray();
    }

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     Database.SaveChanges();
    //
    //     if (ProgressComponent is not null)
    //     {
    //         ProgressComponent.OnFinished += () =>
    //         {
    //             GameData.CurrentPlanet!.Update(Database);
    //             StateHasChanged();
    //             Database.SaveChanges();
    //         };
    //     }
    // }    
    
    private void OpenDetails(short spaceshipId)
    {
        // spaceships id start at 11, so first is 11 -> 0
        selectedIndex = spaceshipId - 11;
        overlayVisible = true;
    }

    /// <summary>
    /// Blurs and grayscales the image when pre-requisites of the battle thing are not met
    /// </summary>
    /// <param name="tech"></param>
    /// <returns></returns>
    private string GetImageStyle(CombatEntityInventory inv)
    {
        return inv.CombatEntity.BuildingRequirements.First().RequiredLevel > GameState.CurrentPlanet!.Buildings.Single(x => x.BuildingId == 8).Level ? "filter: blur(2px) grayscale(1)" : "";
    }
}