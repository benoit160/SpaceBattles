@using SpaceBattles.Core.Domain.Entities.Building
@using SpaceBattles.Core.Domain.Interfaces
@using SpaceBattles.Core.Domain.Entities.Universe
@using SpaceBattles.Core.Domain.Records

<MudStack Row Justify="Justify.SpaceAround">
    @foreach(ResourceCost requirement in Upgrade.Costs.Where(cost => cost.RequiredQuantity > 0))
    {
        <ResourceDisplay
            Cost="requirement"
            Multipler="@Quantity"
            CurrentQuantity="@Planet[requirement.Resource]"/>
    }
        <MudStack Row AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Filled.AccessTime" />
            @if (Upgrade is BuildingLevel)
            {
                <MudText>@GetDurationText(Upgrade.Duration(Planet.Buildings.First(b => b.BuildingId == 8).Level))</MudText>
            }
            else
            {
                <MudText>@GetDurationText(Upgrade.Duration(Planet.Buildings.First(b => b.BuildingId == 9).Level))</MudText>
            }
        </MudStack>
</MudStack>

@code {
    [Parameter, EditorRequired]
    public required IRequirements Upgrade { get; set; }

    [Parameter, EditorRequired]
    public required Planet Planet { get; set; }

    [Parameter]
    public int Quantity { get; set; } = 1;

    private string GetDurationText(TimeSpan span)
    {
        span *= Quantity;
        
        if (span.TotalDays > 1)
        {
            int days = (int)span.TotalDays;
            return $"~ {days} day{(days >= 2 ? 's' : string.Empty)}";
        }
        if (span.TotalHours > 1)
        {
            int hours = (int)span.TotalHours;
            return $"~ {hours} hour{(hours >= 2 ? 's' : string.Empty)}";
        }
        if (span.TotalMinutes > 1)
        {
            int minutes = (int)span.TotalMinutes;
            return $"~ {minutes} minute{(minutes >= 2 ? 's' : string.Empty)}";
        }

        int seconds = (int)span.TotalSeconds;
        return $"{seconds} second{(seconds >= 2 ? 's' : string.Empty)}";
    }
}