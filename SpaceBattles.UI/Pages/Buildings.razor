@using SpaceBattles.Core.Domain.Entities.Universe
@using SpaceBattles.Core.Domain.Entities.Building
@using SpaceBattles.Core.Domain.Enums

@page "/Buildings"

@inject GameState GameState
@inject PlanetService PlanetService

@implements IDisposable

<MudContainer MaxWidth="MaxWidth.Large" Style="overflow-y:scroll; max-height:calc(100vh - var(--mud-appbar-height));">
    <MudStack AlignItems="AlignItems.Center">
        <MudStack Row Style="width: 40%;">
            <div style="width: 50%; display: flex; justify-content: center">
                <MudButton Class="border-2" Size="Size.Large" Variant="Variant.Outlined" Color="Color.Info" Style="font-family:TitleFont;" OnClick="() => SwitchDisplays(true)">
                    <h3>Resources</h3>
                </MudButton>
            </div>
            <div style="width: 50%; display: flex; justify-content: center">
                <MudButton Class="border-2" Size="Size.Large" Variant="Variant.Outlined" Color="Color.Warning" Style="font-family:TitleFont;" OnClick="() => SwitchDisplays(false)">
                    <h3>Facilities</h3>
                </MudButton>
            </div>
        </MudStack>
        
        <MudGrid Class="py-3" Spacing="0">
            @for (int i = 0; i < _displayedBuildings.Length; i++)
            {
                int localI = i;
                @BuildingDisplay(_displayedBuildings.Span[localI])
            }
        </MudGrid>
    </MudStack>
</MudContainer>

<MudOverlay @bind-Visible="_overlayVisible" DarkBackground AutoClose>
    <BuildingDetails Planet="GameState.CurrentPlanet" Building="_planet.Buildings[_selectedIndex]" />
</MudOverlay>

@code {

    private Planet _planet = default!;
    private readonly CancellationTokenSource _source = new();
    private int _selectedIndex;
    private bool _overlayVisible;
    private Memory<BuildingLevel> _buildings;
    private Memory<BuildingLevel> _displayedBuildings;

    protected override void OnInitialized()
    {
        _planet = GameState.CurrentPlanet;
        _buildings = GameState.CurrentPlanet.Buildings.AsMemory();
        _displayedBuildings = _buildings.Slice(0, 7);

        PeriodicTimer timer = new(TimeSpan.FromSeconds(1));
        _ = Task.Run(async () =>
        {
            while (await timer.WaitForNextTickAsync(_source.Token))
            {
                PlanetService.UpdateCurrentPlanet(DateTime.Now);
                StateHasChanged();
            }
        });
    }

    private void SwitchDisplays(bool showResources)
    {
        _displayedBuildings = showResources
            ? _buildings.Slice(0, 7)
            : _buildings.Slice(7, 5);
    }

    private void OpenDetails(short buildingId)
    {
        _selectedIndex = buildingId - 1;
        _overlayVisible = true;
    }
    
    public void Dispose()
    {
        _source.Cancel();
        _source.Dispose();
    }
    
    private RenderFragment BuildingDisplay(BuildingLevel building)
    {
        string style = _planet.MeetsBuildingRequirements(building.Building) ? string.Empty : "filter: grayscale(1)";
        return @<MudItem xs="12" lg="6">
                    <MudPaper Class="pa-2 ma-1">
                        <MudStack Row>
                            <MudImage Src="@building.Building.ImagePath" Style="@style" Alt="a visual representation of this building" Class="align-self-center rounded-lg" Width="150" Height="150"/>
                            <MudStack Spacing="2" Style="width:100%">
                                <MudStack Row Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.h5">@building.Building.Name</MudText>
                                    <MudText Color="Color.Info" Typo="Typo.h6">Level : @building.Level</MudText>
                                </MudStack>
                                <MudDivider/>

                                @if (_planet.BuildingUpgrade is not null && _planet.BuildingUpgrade.BuildingId == building.BuildingId)
                                {
                                    <MudPaper Class="py-1 px-3 mx-3 border-solid border-2 mud-border-info">
                                        <MudStack Justify="Justify.SpaceEvenly">
                                            <MudText>@("Upgrading to level " + (_planet.Buildings.Single(x => x.BuildingId == _planet.BuildingUpgrade.BuildingId).Level + 1))</MudText>
                                            <MudProgressLinear Color="Color.Info" Rounded Striped Size="Size.Large" Value="@_planet.BuildingUpgrade.PercentFinished"/>
                                            <MudText>@_planet.BuildingUpgrade.RemainingTime.ToString(@"hh\:mm\:ss") remaining</MudText>
                                        </MudStack>
                                    </MudPaper>
                                }
                                else
                                {
                                    @GetBuildingStatus(building.BuildingId)
                                    <MudSpacer/>
                                    <MudButton Class="align-self-center" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" OnClick="() => OpenDetails(building.BuildingId)">Details</MudButton>
                                }
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>;
    }

    private RenderFragment GetBuildingStatus(short buildingId)
    {
        long current, max;
        float percentage;
        Color color;

        switch (buildingId)
        {
            case 1:
                return @<MudText Typo="Typo.body1">Mining titanium ore at @_planet.ResourceProduction(Resource.Titanium).ToString("#,##0") units per minute</MudText>;

            case 2:
                current = _planet[Resource.Titanium];
                max = _planet.ResourceCapacity(Resource.Titanium);
                percentage = 100 * Convert.ToSingle(current) / max;

                color = percentage < 70 ? Color.Success : (percentage > 95 ? Color.Error : Color.Warning);

                return @<div>
                            <MudText Typo="Typo.body1" Color="color">
                                Storage capacity : @current.ToString("#,##0") / @_planet.ResourceCapacity(Resource.Titanium).ToString("#,##0")
                            </MudText><MudProgressLinear Color="color" Size="Size.Large" Rounded Value="current" Max="max" />
                        </div>;

            case 3:
                return @<MudText Typo="Typo.body1">Refining silicon crystals at @_planet.ResourceProduction(Resource.Silicon).ToString("#,##0") units per minute</MudText>;

            case 4:
                current = _planet[Resource.Silicon];
                max = _planet.ResourceCapacity(Resource.Silicon);
                percentage = 100 * Convert.ToSingle(current) / max;

                color = percentage < 70 ? Color.Success : (percentage > 95 ? Color.Error : Color.Warning);

                return @<div>
                            <MudText Typo="Typo.body1" Color="color">
                                Storage capacity : @current.ToString("#,##0") / @_planet.ResourceCapacity(Resource.Silicon).ToString("#,##0")
                            </MudText><MudProgressLinear Color="color" Size="Size.Large" Rounded Value="current" Max="max" />
                        </div>;

            case 5:
                return @<MudText Typo="Typo.body1">Extracting ³helium at @_planet.ResourceProduction(Resource.Helium).ToString("#,##0") units per minute</MudText>;

            case 6:
                current = _planet[Resource.Helium];
                max = _planet.ResourceCapacity(Resource.Helium);
                percentage = 100 * Convert.ToSingle(current) / max;

                color = percentage < 70 ? Color.Success : (percentage > 95 ? Color.Error : Color.Warning);

                return @<div>
                            <MudText Typo="Typo.body1" Color="color">
                                Storage capacity : @current.ToString("#,##0") / @_planet.ResourceCapacity(Resource.Helium).ToString("#,##0")
                            </MudText><MudProgressLinear Color="color" Size="Size.Large" Rounded Value="current" Max="max" />
                        </div>;

            case 7:
                return @<MudText Typo="Typo.body1">Producing @_planet.Buildings[6].Energy energy</MudText>;

            case 8:
                if (_planet.BuildingUpgrade is not null)
                {
                    string upgradeName = _planet.Buildings.Single(b => b.BuildingId == _planet.BuildingUpgrade.BuildingId).Building.Name;
                    return @<MudText Typo="Typo.body1" Color="Color.Info">Working on @upgradeName</MudText>;
                }
                goto default;

            default:
                return @<MudText Typo="Typo.body1">Currently idle...</MudText>;
        }
    }
}