@using SpaceBattles.Core.Domain.Entities.Building
@using SpaceBattles.Core.Domain.Entities.Upgrade

@page "/Building/{BuildingName}"

@inject NavigationManager NavigationManager
@inject GameState GameState
@inject PlanetService PlanetService

@if (GameState.CurrentPlanet.BuildingUpgrade is not null)
{
    BuildingUpgrade upgrade = GameState.CurrentPlanet.BuildingUpgrade;
    BuildingLevel level = GameState.CurrentPlanet.Buildings.First(b => b.BuildingId == upgrade.BuildingId);

    <Progress Image="@level.Building.ImagePath"
              Display="@level.Building.Name"
              DisplaySecondary=@($"Upgrading to level {level.Level + 1}")
              Process="@upgrade">
    </Progress>
}

@if (_building is not null)
{
    <BuildingDetails Planet="@GameState.CurrentPlanet" Building="@_building"/>
}

@code {
    [Parameter]
    public required string BuildingName { get; set; }
    
    private readonly CancellationTokenSource _source = new();
    private BuildingLevel? _building;
    
    protected override void OnInitialized()
    {
        _building = GameState.CurrentPlanet.Buildings
            .FirstOrDefault(b => b.Building.Name.Replace(" ", "-") == BuildingName);
        
        if (_building is null)
        {
            NavigationManager.NavigateTo("/Buildings");
        }
        
        PeriodicTimer timer = new(TimeSpan.FromSeconds(1));
        _ = Task.Run(async () =>
        {
            while (await timer.WaitForNextTickAsync(_source.Token))
            {
                PlanetService.UpdateCurrentPlanet(DateTime.Now);
                StateHasChanged();
            }
        });
    }
}