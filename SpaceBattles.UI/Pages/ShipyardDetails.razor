@using SpaceBattles.Core.Domain.Entities.Battle
@using SpaceBattles.Core.Domain.Entities.Universe
@using SpaceBattles.Core.Domain.Entities.Upgrade

@page "/Defense/{EntityName}"
@page "/Spaceship/{EntityName}"

@inject GameState GameState
@inject PlanetService PlanetService

@implements IDisposable

@if (GameState.CurrentPlanet.ShipyardConstruction is not null)
{
    ShipyardConstruction construction = GameState.CurrentPlanet.ShipyardConstruction;
    CombatEntity level = GameState.CurrentPlanet.BattleUnits.First(b => b.CombatEntityId == construction.CombatEntityId).CombatEntity;

    <Progress Image=@level.ImagePath
              Display=@level.Name
              DisplaySecondary=@($"Quantity : {construction.Quantity}")
              Process=@construction>
    </Progress>
}

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="pa-4 rounded-xl">
        <MudStack AlignItems="AlignItems.Stretch">
            <MudStack>
                <MudStack AlignItems="AlignItems.Stretch">
                    <MudStack Row Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h5" Style="font-family:TitleFont;">@_combatEntity.CombatEntity.Name</MudText>
                        <MudText Color="Color.Info" Typo="Typo.h6">@_combatEntity.Quantity available</MudText>
                    </MudStack>
                    <MudDivider DividerType="DividerType.Middle"/>
                    <MudStack Row>
                        <MudImage Style="@_style" Src="@_combatEntity.CombatEntity.ImagePath" Class="align-self-center rounded-lg" Width="256" Height="256"/>
                        @ParagraphDisplay(_combatEntity.CombatEntity.Description)
                    </MudStack>
                </MudStack>
            </MudStack>

            <MudStack Row Spacing="0" Class="py-4">
                <MudDivider DividerType="DividerType.Middle" Class="flex-grow-1 align-self-center"/>
                <MudText Typo="Typo.body1">Construction costs</MudText>
                <MudDivider DividerType="DividerType.Middle" Class="flex-grow-1 align-self-center"/>
            </MudStack>

            <TotalCostDisplay Planet="@GameState.CurrentPlanet" Upgrade="@_combatEntity.CombatEntity" Quantity="@_quantityToBuild"/>

            @if (_planet.ShipyardConstruction is not null)
            {
                <MudAlert Class="align-self-center pointer-events-none" Severity="Severity.Warning">Another construction is already in progress..</MudAlert>
            }
            else if (!_planet.MeetsBuildingRequirements(_combatEntity.CombatEntity))
            {
                <MudAlert Class="align-self-center pointer-events-none" Severity="Severity.Warning">Requirements not met</MudAlert>
            }
            else if (_planet.HasEnoughResource(_combatEntity.CombatEntity))
            {
                <MudStack Row Justify="Justify.SpaceAround" AlignItems="AlignItems.End" Class="align-self-center">
                    <MudNumericField @bind-Value="@_quantityToBuild" Label="Quantity" Variant="Variant.Text" Min="1" Max="@MaxBuildableQuantity()"/>
                    <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="@Upgrade">Build</MudButton>
                </MudStack>
            }
            else
            {
                <MudAlert Class="align-self-center pointer-events-none" Severity="Severity.Error">Not enough resources</MudAlert>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public required string EntityName { get; set; }

    private Planet _planet;
    private CombatEntityInventory _combatEntity;
    private int _quantityToBuild = 1;
    
    string _style = string.Empty;
    
    private readonly CancellationTokenSource _source = new();

    private int MaxBuildableQuantity()
    {
        int maxAffordable = Convert.ToInt32(_planet.MaximumAffordableQuantity(_combatEntity.CombatEntity));
        return Math.Min(maxAffordable, 100);
    }

    protected override void OnParametersSet()
    {
        _planet = GameState.CurrentPlanet;
        
        _combatEntity = _planet.BattleUnits.First(b => b.CombatEntity.Name.Replace(" ", "-") == EntityName);
        
        _style = GameState.CurrentPlanet.MeetsBuildingRequirements(_combatEntity.CombatEntity)
            ? string.Empty
            : "filter: grayscale(1)";
        
        PeriodicTimer timer = new(TimeSpan.FromSeconds(1));
        _ = Task.Run(async () =>
        {
            while (await timer.WaitForNextTickAsync(_source.Token))
            {
                PlanetService.UpdateCurrentPlanet(DateTime.Now);
                StateHasChanged();
            }
        });
    }
    
    private void Upgrade()
    {
        _planet.TryConstructShipyard(_combatEntity.CombatEntityId, Convert.ToInt16(_quantityToBuild));
        _quantityToBuild = 1;
    }
    
    private static RenderFragment ParagraphDisplay(string text)
    {
        string[] paragraphs = text.Split(Environment.NewLine);

        return
            @<div style="overflow-y: auto; max-height: 256px">
                @for(int i = 0; i < paragraphs.Length; i++)
                {
                    int localI = i;
                    <MudText Typo="Typo.body1" Style="@(localI == paragraphs.Length - 1 ? string.Empty : "margin-bottom: 0.5em")">@paragraphs[localI]</MudText>
                }
            </div>;
    }

    public void Dispose()
    {
        _source.Cancel();
        _source.Dispose();
    }
}